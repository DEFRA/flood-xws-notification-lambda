service: xws
frameworkVersion: '2'

plugins:
    - serverless-s3-deploy

custom:
  filesBucketName: ${self:service}-files-${self:provider.stage}
  filesBucketDomain: ${self:custom.filesBucketName}.s3.${self:provider.region}.amazonaws.com
  filesBucketUrl: https://${self:custom.filesBucketDomain}
  alertsTableName: ${self:service}-alerts-${self:provider.stage}

  assets:
    targets:
      - bucket:
          Ref: s3Files
        prefix: alerts
        files:
        - source: ./files/
          globs: 'alert-style.xsl'
      - bucket:
          Ref: s3Files
        files:
        - source: ./files/
          globs:
            - 'rss-style.xsl'
            - 'draw-shapes.js'
            - 'favicon.ico'
            - 'xws.png'

provider:
  name: aws
  runtime: nodejs12.x
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'eu-west-2'}
  lambdaHashingVersion: 20201221
  environment:
    FILES_BUCKET_NAME: ${self:custom.filesBucketName}
    FILES_BUCKET_URL: ${self:custom.filesBucketUrl}
    ALERTS_TABLE_NAME: ${self:custom.alertsTableName}
    ALERT_PUBLISHED_TOPIC_ARN: !Ref alertPublishedTopic
    PINPOINT_APPLICATION_ID: !Ref pinpointApp

  iamRoleStatements:
    - Effect: Allow
      Action:
        - s3:ListBucket
        - s3:GetObject
        - s3:GetObjectAcl
        - s3:PutObject
        - s3:PutObjectAcl
      Resource:
        - arn:aws:s3:::${self:custom.filesBucketName}
        - arn:aws:s3:::${self:custom.filesBucketName}/*

    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - !GetAtt
          - ddbAlerts
          - Arn

    - Effect: Allow
      Action:
        - mobiletargeting:GetEndpoint
        - mobiletargeting:UpdateEndpoint
        - mobiletargeting:GetUserEndpoints
        - mobiletargeting:DeleteEndpoint
        - mobiletargeting:DeleteUserEndpoints
      Resource:
        - !Sub 
          - '${pinpointAppArn}/*'
          - { pinpointAppArn: !GetAtt pinpointApp.Arn }

functions:
  processAlert:
    handler: process-alert.handler
    events:
      - s3:
          bucket: ${self:custom.filesBucketName}
          event: s3:ObjectCreated:*
          rules:
            - prefix: alerts/
            - suffix: .xml
          existing: true

  enqueue:
    handler: enqueue.handler
    events:
      - sns:
          arn: !Ref alertPublishedTopic
          topicName: alertPublishedTopic

resources:
  Resources:
    alertPublishedTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: ${self:service}-alert-published-${self:provider.stage}
        DisplayName: Alert published

    s3Files:
      Type: AWS::S3::Bucket
      Properties:
        AccessControl: Private
        BucketName: ${self:custom.filesBucketName}
        # PublicAccessBlockConfiguration:
        #   BlockPublicAcls: true
        #   BlockPublicPolicy: true
        #   IgnorePublicAcls: true
        #   RestrictPublicBuckets: true

    ddbAlerts:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.alertsTableName}
        AttributeDefinitions:
          - AttributeName: area_code
            AttributeType: S
        KeySchema:
          - AttributeName: area_code
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5

    cloudFrontS3BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket:
          Ref: s3Files
        PolicyDocument:
          Statement:
            - Sid: PublicReadGetObject
              Effect: Allow
              Principal: "*"
              Action:
              - s3:GetObject
              Resource: arn:aws:s3:::${self:custom.filesBucketName}/*

    cloudFrontDistribution:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Origins:
            - DomainName: ${self:custom.filesBucketDomain}
              Id: xws-${self:provider.stage}
              CustomOriginConfig:
                HTTPPort: 80
                HTTPSPort: 443
                OriginProtocolPolicy: https-only
          Enabled: 'true'
          # Aliases:
          # - defraxws.com
          DefaultRootObject: alerts.xml
          DefaultCacheBehavior:
            AllowedMethods:
              - GET
              - HEAD
              - OPTIONS
            TargetOriginId: xws-${self:provider.stage}
            ForwardedValues:
              QueryString: false
              Cookies:
                Forward: none
            ViewerProtocolPolicy: redirect-to-https
          ViewerCertificate:
            CloudFrontDefaultCertificate: true

    pinpointApp:
      Type: AWS::Pinpoint::App
      Properties: 
        Name: xws-${self:provider.stage}
    
    pinpointSmsChannel:
      Type: AWS::Pinpoint::SMSChannel
      Properties: 
        ApplicationId: !Ref pinpointApp
        Enabled: true
          
    pinpointEmailChannel:
      Type: AWS::Pinpoint::EmailChannel
      Properties: 
        ApplicationId: !Ref pinpointApp
        Enabled: true 
        FromAddress: getfloodwarnings@gmail.com
        Identity: arn:aws:ses:eu-west-2:190133113546:identity/getfloodwarnings@gmail.com
        # RoleArn: 